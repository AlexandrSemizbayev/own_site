{"type":"folder","title":"","files":[{"type":"excluded","title":".gitignore","path":""},{"type":"file","title":"index.html","content":"<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Vite App</title>\n  </head>\n  <body>\n    <div id=\"app\">\n      <div class=\"terminal\">\n        <div class=\"close-btn\">X</div>\n        <div class=\"output\">\n          <p>Enter \"/help\"</p>\n        </div>\n        <div class=\"input-area\">\n          <label for=\"terminal-input\" id=\"terminal-input-label\">\n            >\n          </label>\n          <input type=\"text\" id=\"terminal-input\" class=\"terminal-input\" autofocus>\n          \n        </div>\n      </div>\n    </div>\n    <script type=\"module\" src=\"/main.js\"></script>\n  </body>\n</html>\n"},{"type":"file","title":"javascript.svg","content":"<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" aria-hidden=\"true\" role=\"img\" class=\"iconify iconify--logos\" width=\"32\" height=\"32\" preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 256 256\"><path fill=\"#F7DF1E\" d=\"M0 0h256v256H0V0Z\"></path><path d=\"m67.312 213.932l19.59-11.856c3.78 6.701 7.218 12.371 15.465 12.371c7.905 0 12.89-3.092 12.89-15.12v-81.798h24.057v82.138c0 24.917-14.606 36.259-35.916 36.259c-19.245 0-30.416-9.967-36.087-21.996m85.07-2.576l19.588-11.341c5.157 8.421 11.859 14.607 23.715 14.607c9.969 0 16.325-4.984 16.325-11.858c0-8.248-6.53-11.17-17.528-15.98l-6.013-2.58c-17.357-7.387-28.87-16.667-28.87-36.257c0-18.044 13.747-31.792 35.228-31.792c15.294 0 26.292 5.328 34.196 19.247l-18.732 12.03c-4.125-7.389-8.591-10.31-15.465-10.31c-7.046 0-11.514 4.468-11.514 10.31c0 7.217 4.468 10.14 14.778 14.608l6.014 2.577c20.45 8.765 31.963 17.7 31.963 37.804c0 21.654-17.012 33.51-39.867 33.51c-22.339 0-36.774-10.654-43.819-24.574\"></path></svg>"},{"type":"folder","title":"localRepository","files":[{"type":"folder","title":"components","files":[{"type":"file","title":"File.js","content":"const template = `\n  <div class=file>\n  /*onclick=\"toogleView()\"*/\n    <span class=\"file-name file-{{ id }}\">\n      {{ title }}\n    </span>\n    <pre>\n      <code id=\"{{ id }}\" class=\"invisible\" style=\"white-space: pre-wrap;\">\n        {{ content }}\n      </code>\n    </pre>\n  </div>\n  <script>\n  (function() {\n      const codeSection = document.querySelector('#{{ id}}');\n      let isVisible = false;\n      function toogleView(e) {\n        isVisible = !isVisible;\n        if(isVisible) {\n          codeSection.classList.add('visible');\n          codeSection.classList.remove('invisible');\n        } else {\n          codeSection.classList.add('invisible');\n          codeSection.classList.remove('visible');\n        }\n        // codeSection.classList.add('visible') : codeSection.classList.\n        console.log(e);\n      }\n      const elementToListen = document.querySelector('.file-{{ id }}');\n      // console.log(elementToListen);\n      elementToListen.addEventListener('click', toogleView);\n  })();\n  </script>\n`;\n\n// const methods = {\n//   toogleView(e) {\n//     console.log(this);\n//     console.log(e,e.target);\n//   }\n// };\n// let script = '<script>';\n\n// Object.keys(methods).forEach((key) => {\n//   console.log(key);\n//   script += `function ${methods[key]}`;\n// })\n\n// script+='</script>'\n// template += script;\n\n// const fileParameters = {\n//   toogleView: (e) => {\n//     console.log(this);\n//     console.log(e,e.target);\n//   }\n// };\n\nconst data = {\n  id: 'el-1',\n  title: '',\n  content: '',\n  template,\n  // ...fileParameters,\n};\n\nexport default data;"}]},{"type":"file","title":"generate.js","content":"import fs from 'fs';\nimport { replaceHTMLSymbols } from './helpers/replaceSymbols.js';\nimport { parseTemplate } from './templateParser.js';\nimport File from './components/File.js';\nconst createTemplate = (children) => `<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Project structure</title>\n    <style>\n      .visible {\n        display: block;\n      }\n      .invisible {\n        display: none;\n      }\n    </style>\n  </head>\n  <body>\n    ${children}\n  </body>\n</html>`\nconst mode = `to${process.env.MODE || 'HTML'}`;\n\nfunction createFileView(file) {\n  // console.log(title);\n  const actions = {\n    'toHTML': () => {\n      const content = replaceHTMLSymbols(file.content);\n      return parseTemplate(\n        {\n          ...File,\n          title: file.title,\n          content,\n        },\n      );\n      // console.log(file);\n      // return `\n      //   <div class=file>\n      //     <span class=\"file-name\">\n      //       ${file.title}\n      //     </span>\n      //     <pre>\n      //       <code id=\"'+file.title+'\">\n      //         ${replace(\n      //           replace(\n      //             replace(\n      //               file.content,\n      //               /[&]/gm,\n      //               '&amp',\n      //             ),\n      //             /[<]/gm,\n      //             '&lt'\n      //           ),\n      //           /[>]/gm,\n      //           '&gt'\n      //         )}\n      //       </code>\n      //     </pre>\n      //   </div>\n      // `\n      return '<div class=file>'+\n      '<span class=\"file-name\">'+\n      file.title+\n      '</span>'+\n      '<pre>'+\n      '<code id=\"'+file.title+'\">'+\n      replace(\n        replace(\n          replace(\n            file.content,\n            /[&]/gm,\n            '&amp',\n          ),\n          /[<]/gm,\n          '&lt'\n        ),\n        /[>]/gm,\n        '&gt'\n      )+\n      '</code></pre></div>'\n    },\n  };\n  return mode in actions ? actions[mode]() : '';\n}\n\nfunction createFolderView(folder) {\n  const files = folder.files.map((file) => {\n\n    if(file.type === 'file') return createFileView(file) //replace(createFileView(file),/\"\\n \"/gm, '<br/>');\n    if(file.type === 'folder') return createFolderView(file);\n  }).join('');\n  const actions = {\n    toHTML: () => `<div class=folder><span>${folder.title}</span>${files}</div>`\n  };\n  return mode in actions ? actions[mode]() : '';\n}\n\n// function replace(str, regex, to) {\n//   return str.replace(regex, to);\n// }\n\nexport default async function generate(structure) {\n  const generated = createTemplate(createFolderView(structure));\n  fs.writeFile('./structure.html', generated,(err) => {console.error(err)});\n}\n"},{"type":"file","title":"generateJSON.js","content":"import fs from 'fs';\nimport {dirname} from 'path';\nimport generate from './generate.js';\n// import {JSDOM} from 'jsdom';\n\n// const { window } = new JSDOM();\n// const { document } = window;\n\n// const mode = `to${process.env.MODE || 'HTML'}`;\n\nasync function init() {\n\n  // class ViewGenerator{\n  //   constructor() {\n  //     // this.root = \n  //   }\n  // }\n  \n  // class FileView {\n  //   constructor(title, content) {\n  //     this.title = title;\n  //     this.content = content;\n      \n  //   }\n  \n  //   toHTML() {\n  //     console.log(this.title);\n  //     return `\n  //       <div class=\"file\">\n  //         <span class=\"file-name\">\n  //           ${this.title}\n  //         </span>\n  //         <span id=\"${this.title}\">\n  //           <code>\n  //           ${this.content}\n  //           </code>\n  //         </span>\n  //       </div>\n  //     `\n  //   }\n  // }\n\n  // function createFileView(title = '', content = '') {\n  //   console.log(title);\n  //   const actions = {\n  //     'toHTML': () => {\n  //       const wrapper = document.createElement('div');\n  //       wrapper.classList.add('file');\n  //       const title = document.createElement('span');\n  //       // title.classList.add(title);\n  //       wrapper.appendChild(title);\n  //       const children = document.createElement('div');\n  //       children.innerText = content;\n  //       wrapper.appendChild(children);\n  //       return wrapper.innerHTML;\n  //     //   return `\n  //     //   <div class=\"file\">\n  //     //     <span class=\"file-name\">\n  //     //       ${title}\n  //     //     </span>\n          \n  //     //       <code id=\"${title}\">\n  //     //       ${content}\n  //     //       </code>\n          \n  //     //   </div>\n  //     // `\n  //     },\n  //   };\n  //   return mode in actions ? actions[mode]() : '';\n  // }\n\n  // function createFolderView(path = '', title = '') {\n  //   const files = ls(`${path}${title}/`);\n  //   const actions = {\n  //     // .map((file) => new FileView(file)[mode]())\n  //     'toHTML': () => `\n  //       <div class=\"folder\">\n  //         <span> ${title} </span>\n  //         ${files}\n  //       </div>\n  //     `\n  //   };\n  //   return mode in actions ? actions[mode]() : '';\n  // }\n  \n  // class FolderView {\n  //   constructor(path, title) {\n  //     this.title = title;\n  //     this.files = ls(`${path}${title}/`);\n  //   }\n  \n  //   toHTML() {\n  //     const files = [...this.files].join('')\n  //     // .join('');\n  //     return `\n  //       <div class=\"folder\">\n  //       // .map((file) => new FileView(file)[mode]())\n  //         ${files}\n  //       </div>\n  //     `\n  //   }\n  // }\n\n\n  const startPath = '../';\n  const excludeFiles = {\n    'package-lock.json': true,\n    '.gitignore': true,\n    'node_modules': true,\n    'structure.html': true,\n    'structure.json': true,\n  }\n\n  const skipThisExtensions = ['jpg','jpeg','png','bmp','mp3','mp4','mpeg'];\n  const extensionsToSkip = {};\n\n  skipThisExtensions.forEach((extension) => {\n    extensionsToSkip[`.${extension}`] = true;\n  })\n\n  const generateExcluded = (fileName, path = '') => ({\n    type: 'excluded',\n    title: fileName,\n    path,\n  })\n\n  const generateFile = (fileName, content) => \n    // createFileView(fileName,content);\n    // new FileView(fileName, content)[mode]();\n    {\n    return {\n    type: 'file',\n    title: fileName,\n    content: content,\n    };\n  };\n\n  const generateFolder = (path = './', folderName = '') => {\n    // return createFolderView(path,folderName);\n    // return new FolderView(path, folderName)[mode]();\n    const files = ls(`${path}${folderName}/`);\n    return {\n      type: 'folder',\n      title: folderName,\n      files,\n    };\n  };\n\n\n  function defineType(fileName, path) {\n    if(fileName.match(/[\\w|\\-|_]+\\.\\w+/gm)) {\n      return open(fileName, path);\n    } else {\n      return generateFolder(path, fileName);\n    }\n  }\n\n  function open(fileName, path) {\n    const fileContent = fs.readFileSync(path+fileName, { encoding: 'utf-8', flag: 'r'});\n    return generateFile(fileName, fileContent);\n  }\n\n  function ls(path = '.') {\n    const files = fs.readdirSync(path,{ withFileTypes: true });\n    const result = files.map((file) => {\n      if(!excludeFiles[file.name]) {\n        const extension = file.name.match(/\\.\\w+/gm);\n        if(extension && extensionsToSkip[extension[0]]) {\n          return generateExcluded(file.name, path+file.name);\n        }\n        const result = defineType(file.name, path);\n        return result;\n      } else {\n        return generateExcluded(file.name);\n      }\n    });\n    return result;\n  }\n  const root = generateFolder(dirname(startPath));\n  // console.log(root);\n  generate(root);\n  fs.writeFile('./structure.json', JSON.stringify(await Promise.resolve(root)),(err) => {console.error(err)});\n}\n\ninit();"},{"type":"folder","title":"helpers","files":[{"type":"file","title":"replaceSymbols.js","content":"export function replace(str, regex, to) {\n  return str.replace(regex, to);\n}\n\nexport function replaceHTMLSymbols(rawHTML) { // replacing all special HTML symbols to avoid their dissapearance in resulted examples\n  return replace(\n    replace(\n      replace( // > -> &gt\n        replace( // < -> &lt\n          replace(  // & -> &amp\n            rawHTML,\n            /[&]/gm,\n            '&amp',\n          ),\n          /[<]/gm,\n          '&lt'\n        ),\n        /[>]/gm,\n        '&gt'\n      ),\n      /[{]/gm,\n      '&lbrace;'\n    ),\n    /[}]/gm,\n    '&rbrace;',\n  );\n  // return value for HTML changed from <span>Text</span> to &ltspan&gtText&ltspan&gt\n  // return value for JS changed from if(a >= x && x <= 10) to if(a &gt= x &amp&amp x &lt= 10)\n}"}]},{"type":"file","title":"templateParser.js","content":"/*  This file helps us to parse template files\ninput:\n----------------\n<div class=file>\n  <span class=\"file-name\" @click=\"toogleView\">\n    {{ title }}\n  </span>\n  <pre>\n    <code id=\"{{ title }}\">\n      {{ content }}\n    </code>\n  </pre>\n</div>\n----------------\n\ndesired output:\n----------------\n<div class=file>\n  <span class=\"file-name\" onclick=\"toogleView\">\n    Alex\n  </span>\n  <pre>\n    <code id=\"Alex\">\n      Some content\n    </code>\n  </pre>\n</div>\n----------------\n*/\nlet countAsId = 1;\n\nconst nonWhiteSpaceChars = '\\\\S+';  // double backslash is required for new RegExp(regex), since we are passing a string;\nconst additionalAttributes = {  // keys have RegExp based naming\n  // [`@click=\"${nonWhiteSpaceChars}\"`]: (callback) => `onclick=\"${callback}\"`,\n  // [`@change=\"[${nonWhiteSpaceChars}]\"`]: (callback) => `onchange=\"${callback}\"`,\n  [`@click=\"${nonWhiteSpaceChars}\"`]: (callback) => `onclick=\"(e) => ${callback}\"`,\n  [`@change=\"[${nonWhiteSpaceChars}]\"`]: (callback) => `onchange=\"${callback}\"`,\n}\n\nconst strictMode = !!process.env.IS_STRICT;\n\nconst throwException = (reason, template) => {\n  const message = `${reason} was not passed in ${template}, ${process.cwd()}`;\n  if(strictMode) throw Error(message);\n  else console.warn(message);\n}\n\nexport const parseTemplate = (data) => {\n  let { template } = data;\n  data.id = `el${countAsId}`;\n  countAsId++;\n  delete data[template];\n\n  const valuesToReplace = template.match(/\\{\\{\\s*([^\\s{}]+)\\s*\\}\\}/gm);  // matching all values enclosed in {{ * }};\n  const filteredDictOfValues = {};\n  valuesToReplace.forEach((val) => {\n    // const matchedKey = val.match(/[^\\s{}]+/);\n    filteredDictOfValues[val]=true;\n  });\n  const filteredValues = Object.keys(filteredDictOfValues);\n  filteredValues.forEach((scopedValue,idx) => {\n    // console.log(scopedValue,idx);\n    // const matchedValues = scopedValue.matchAll(/[^\\s{}]+/);  // matching all non-white-space chars within {{ * }};\n    // if(matchedValues) { // may result null\n    //   console.log(matchedValues,idx,'matchedValue');\n    //   if(!matchedValue[0] in data) throwException(matchedValue[0], template); // throw exception, if not presented in data;\n    //   template = template.replace(scopedValue, data[matchedValue[0]]);  // replacing {{ * }} to passed value;\n    //   // console.table({template,matchedValue:matchedValue[0]});\n    // }\n    const matchedValue = scopedValue.match(/[^\\s{}]+/);  // matching all non-white-space chars within {{ * }};\n    if(matchedValue) { // may result null\n      console.log(matchedValue[0],idx,'matchedValue');\n      if(!matchedValue[0] in data) throwException(matchedValue[0], template); // throw exception, if not presented in data;\n      template = template.replaceAll(scopedValue, data[matchedValue[0]]);  // replacing {{ * }} to passed value;\n      if(matchedValue[0] === 'id') {\n        console.log(template);\n      }\n      // console.table({template,matchedValue:matchedValue[0]});\n    }\n  });\n  if(countAsId === 14) {\n    console.log(template);\n  }\n  // console.log(filteredValues);\n  Object.keys(additionalAttributes).forEach((attr) => { // \n    const regexp = new RegExp(attr, 'gm');\n    const match = template.match(regexp); // getting whole attribute, like @click=\"toogleView\"\n    if(match) {\n      match.forEach((matchedAttr) => {\n        const val = matchedAttr.match(/\"([^\"]*)\"/gm); // matching everything enclosed in double quotes a-la \"toogleView\"\n        if(val) {\n          const parameter = val[0].replace(/\"/gm,''); // replacing \": '\"toogleView\"' -> 'toogleView'\n          if(!parameter in data) throwException(parameter, template);\n          template = template.replace(matchedAttr, additionalAttributes[attr](parameter));\n        }\n      });\n    }\n  });\n  // if(countAsId === 3) {\n  //   console.log(template);\n  // }\n  return template;\n}"}]},{"type":"file","title":"main.js","content":"import './style.scss';\n\nconst about = `\n  With over three years of experience delivering impactful frontend solutions, I specialize in Vue.js and have a solid background in React.js.\n  My technical skills include a strong command of JavaScript, HTML5, CSS3, and TypeScript, and I am well-versed in creating mobile-first, responsive websites.\n  In my previous role, I thrived in a fast-paced and diverse environment, building user interfaces that boosted user engagement and drove business growth.\n  I'm confident I can make a similar positive impact on your team.\n`\nconst output = document.querySelector('.output');\nconst inputLine = document.querySelector('#terminal-input');\nconst writeLine = (str) => {\n  const p = document.createElement('p');\n  let idx = 0;\n  output.appendChild(p);\n  function recursive() {\n    window.requestAnimationFrame(() => {\n      p.innerText += str[idx];\n      console.log(str[idx] === ' ', str[idx] === '\\n');\n      idx++;\n      if(idx < str.length) {\n        recursive();\n      }\n    })\n  }\n  recursive();\n}\n\nconst commands = {\n  '/help' : () => {\n    Object.keys(commands).forEach((command) => {\n      writeLine(command);\n    })\n  },\n  '/about': () => {\n    const splitedText = about.split('\\n');\n    writeLine(about);\n    // splitedText.forEach((paragraph) => {\n    //   writeLine(paragraph);\n    // });\n  },\n  '/show_code': () => {\n    console.log('S_C')\n  },\n  '/cv': () => {\n    console.log('cv')\n  },\n}\n\ninputLine.addEventListener('keypress', (e) => {\n  requestAnimationFrame(() => {\n    if(e.charCode === 13) {\n      const {value} = e.target;\n      console.log(e);\n      if(value in commands) {\n        commands[value]();\n        e.target.value = \"\";\n      } else {\n        writeLine(`Command not found: ${value}`);\n      }\n    }\n  })\n});\n"},{"type":"excluded","title":"node_modules","path":""},{"type":"excluded","title":"package-lock.json","path":""},{"type":"file","title":"package.json","content":"{\n  \"name\": \"terminal\",\n  \"private\": true,\n  \"version\": \"0.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"preview\": \"vite preview\"\n  },\n  \"devDependencies\": {\n    \"jsdom\": \"^24.1.0\",\n    \"sass\": \"^1.77.6\",\n    \"vite\": \"^5.3.1\"\n  },\n  \"dependencies\": {\n    \"vue\": \"^3.4.31\"\n  }\n}\n"},{"type":"folder","title":"public","files":[{"type":"excluded","title":"2D-Game-Zombie-Character-–-Free-Sprite-Pack-1-1-1.jpg","path":"./public/2D-Game-Zombie-Character-–-Free-Sprite-Pack-1-1-1.jpg"},{"type":"file","title":"vite.svg","content":"<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" aria-hidden=\"true\" role=\"img\" class=\"iconify iconify--logos\" width=\"31.88\" height=\"32\" preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 256 257\"><defs><linearGradient id=\"IconifyId1813088fe1fbc01fb466\" x1=\"-.828%\" x2=\"57.636%\" y1=\"7.652%\" y2=\"78.411%\"><stop offset=\"0%\" stop-color=\"#41D1FF\"></stop><stop offset=\"100%\" stop-color=\"#BD34FE\"></stop></linearGradient><linearGradient id=\"IconifyId1813088fe1fbc01fb467\" x1=\"43.376%\" x2=\"50.316%\" y1=\"2.242%\" y2=\"89.03%\"><stop offset=\"0%\" stop-color=\"#FFEA83\"></stop><stop offset=\"8.333%\" stop-color=\"#FFDD35\"></stop><stop offset=\"100%\" stop-color=\"#FFA800\"></stop></linearGradient></defs><path fill=\"url(#IconifyId1813088fe1fbc01fb466)\" d=\"M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z\"></path><path fill=\"url(#IconifyId1813088fe1fbc01fb467)\" d=\"M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z\"></path></svg>"}]},{"type":"excluded","title":"structure.html","path":""},{"type":"excluded","title":"structure.json","path":""},{"type":"file","title":"style.css","content":":root {\n  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;\n  line-height: 1.5;\n  font-weight: 400;\n\n  color-scheme: light dark;\n  color: rgba(255, 255, 255, 0.87);\n  background-color: #242424;\n\n  font-synthesis: none;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\na {\n  font-weight: 500;\n  color: #646cff;\n  text-decoration: inherit;\n}\na:hover {\n  color: #535bf2;\n}\n\nbody {\n  margin: 0;\n  display: flex;\n  place-items: center;\n  min-width: 320px;\n  min-height: 100vh;\n}\n\nh1 {\n  font-size: 3.2em;\n  line-height: 1.1;\n}\n\n#app {\n  max-width: 1280px;\n  margin: 0 auto;\n  padding: 2rem;\n  text-align: center;\n}\n\n.logo {\n  height: 6em;\n  padding: 1.5em;\n  will-change: filter;\n  transition: filter 300ms;\n}\n.logo:hover {\n  filter: drop-shadow(0 0 2em #646cffaa);\n}\n.logo.vanilla:hover {\n  filter: drop-shadow(0 0 2em #f7df1eaa);\n}\n\n.card {\n  padding: 2em;\n}\n\n.read-the-docs {\n  color: #888;\n}\n\nbutton {\n  border-radius: 8px;\n  border: 1px solid transparent;\n  padding: 0.6em 1.2em;\n  font-size: 1em;\n  font-weight: 500;\n  font-family: inherit;\n  background-color: #1a1a1a;\n  cursor: pointer;\n  transition: border-color 0.25s;\n}\nbutton:hover {\n  border-color: #646cff;\n}\nbutton:focus,\nbutton:focus-visible {\n  outline: 4px auto -webkit-focus-ring-color;\n}\n\n@media (prefers-color-scheme: light) {\n  :root {\n    color: #213547;\n    background-color: #ffffff;\n  }\n  a:hover {\n    color: #747bff;\n  }\n  button {\n    background-color: #f9f9f9;\n  }\n}\n"},{"type":"file","title":"style.scss","content":"@import url('https://fonts.googleapis.com/css2?family=Jersey+15&family=Press+Start+2P&display=swap');\n$terminal_color: white;\n.terminal {\n  * {\n    font-family: \"Jersey 15\", sans-serif;\n    font-weight: 400;\n    font-style: normal;\n    letter-spacing: 1px;\n    font-size: 12px;\n  }\n  position: fixed;\n  bottom: 0;\n  right: 0;\n  height: 300px;\n  width: 400px;\n  background-color: black;\n  border-radius: 5px;\n  color: $terminal_color;\n  \n  .close-btn {\n    border: 1px solid $terminal_color;\n    position: absolute;\n    top: 5px;\n    right: 5px;\n    padding: 2px 5px;\n    border-radius: 2px;\n    opacity: .8;\n    letter-spacing: 0px;\n  }\n  .output {\n    height: 90%;\n    width: 100%;\n    padding-top: 5px;\n    padding-left: 10px;\n    white-space: pre-wrap;\n  }\n  .input-area {\n    height: 10%;\n    display: flex;\n    #terminal-input-label {\n      width: 5%;\n      height: 100%;\n      text-align: right;\n      align-content: center;\n      font-size: 10px;\n    }\n    .terminal-input {\n      height: 100%;\n      width: 95%;\n      background-color: black;\n      position: relative;\n      border: none;\n      outline: none;\n      color: $terminal_color;\n    }\n  }\n}"},{"type":"folder","title":"test","files":[{"type":"file","title":"1.json","content":"{\"type\":\"folder\",\"title\":\"\",\"files\":[{},{},{},{},{},{},{},{}]}"}]}]}